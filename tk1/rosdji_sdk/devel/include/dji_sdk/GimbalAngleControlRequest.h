// Generated by gencpp from file dji_sdk/GimbalAngleControlRequest.msg
// DO NOT EDIT!


#ifndef DJI_SDK_MESSAGE_GIMBALANGLECONTROLREQUEST_H
#define DJI_SDK_MESSAGE_GIMBALANGLECONTROLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_sdk
{
template <class ContainerAllocator>
struct GimbalAngleControlRequest_
{
  typedef GimbalAngleControlRequest_<ContainerAllocator> Type;

  GimbalAngleControlRequest_()
    : yaw(0)
    , roll(0)
    , pitch(0)
    , duration(0)
    , absolute_or_incremental(false)
    , yaw_cmd_ignore(false)
    , roll_cmd_ignore(false)
    , pitch_cmd_ignore(false)  {
    }
  GimbalAngleControlRequest_(const ContainerAllocator& _alloc)
    : yaw(0)
    , roll(0)
    , pitch(0)
    , duration(0)
    , absolute_or_incremental(false)
    , yaw_cmd_ignore(false)
    , roll_cmd_ignore(false)
    , pitch_cmd_ignore(false)  {
  (void)_alloc;
    }



   typedef int16_t _yaw_type;
  _yaw_type yaw;

   typedef int16_t _roll_type;
  _roll_type roll;

   typedef int16_t _pitch_type;
  _pitch_type pitch;

   typedef int16_t _duration_type;
  _duration_type duration;

   typedef uint8_t _absolute_or_incremental_type;
  _absolute_or_incremental_type absolute_or_incremental;

   typedef uint8_t _yaw_cmd_ignore_type;
  _yaw_cmd_ignore_type yaw_cmd_ignore;

   typedef uint8_t _roll_cmd_ignore_type;
  _roll_cmd_ignore_type roll_cmd_ignore;

   typedef uint8_t _pitch_cmd_ignore_type;
  _pitch_cmd_ignore_type pitch_cmd_ignore;




  typedef boost::shared_ptr< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GimbalAngleControlRequest_

typedef ::dji_sdk::GimbalAngleControlRequest_<std::allocator<void> > GimbalAngleControlRequest;

typedef boost::shared_ptr< ::dji_sdk::GimbalAngleControlRequest > GimbalAngleControlRequestPtr;
typedef boost::shared_ptr< ::dji_sdk::GimbalAngleControlRequest const> GimbalAngleControlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dji_sdk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'dji_sdk': ['/home/ubuntu/cc/rosdji_sdk/src/Onboard-SDK-ROS-3.1/dji_sdk/msg', '/home/ubuntu/cc/rosdji_sdk/devel/share/dji_sdk/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ada515ce6b45dc1f09c576bfab01d4a";
  }

  static const char* value(const ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ada515ce6b45dc1ULL;
  static const uint64_t static_value2 = 0xf09c576bfab01d4aULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_sdk/GimbalAngleControlRequest";
  }

  static const char* value(const ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
\n\
int16 yaw\n\
int16 roll\n\
int16 pitch\n\
int16 duration\n\
\n\
bool absolute_or_incremental\n\
bool yaw_cmd_ignore\n\
bool roll_cmd_ignore\n\
bool pitch_cmd_ignore\n\
";
  }

  static const char* value(const ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yaw);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.duration);
      stream.next(m.absolute_or_incremental);
      stream.next(m.yaw_cmd_ignore);
      stream.next(m.roll_cmd_ignore);
      stream.next(m.pitch_cmd_ignore);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimbalAngleControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_sdk::GimbalAngleControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "yaw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yaw);
    s << indent << "roll: ";
    Printer<int16_t>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "duration: ";
    Printer<int16_t>::stream(s, indent + "  ", v.duration);
    s << indent << "absolute_or_incremental: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.absolute_or_incremental);
    s << indent << "yaw_cmd_ignore: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yaw_cmd_ignore);
    s << indent << "roll_cmd_ignore: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roll_cmd_ignore);
    s << indent << "pitch_cmd_ignore: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pitch_cmd_ignore);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_SDK_MESSAGE_GIMBALANGLECONTROLREQUEST_H
