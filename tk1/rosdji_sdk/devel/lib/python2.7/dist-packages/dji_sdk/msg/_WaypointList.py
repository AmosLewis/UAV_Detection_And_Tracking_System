# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_sdk/WaypointList.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dji_sdk.msg

class WaypointList(genpy.Message):
  _md5sum = "284386e6fe0f355bdea1db93ead90084"
  _type = "dji_sdk/WaypointList"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Waypoint[] waypoint_list

================================================================================
MSG: dji_sdk/Waypoint
#latitude is in degree
float64 latitude
#longitude is in degree
float64 longitude
float32 altitude
#heading is in [-180,180]
int16 heading 
#stay time is in second
uint16 staytime
"""
  __slots__ = ['waypoint_list']
  _slot_types = ['dji_sdk/Waypoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       waypoint_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WaypointList, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.waypoint_list is None:
        self.waypoint_list = []
    else:
      self.waypoint_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.waypoint_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoint_list:
        _x = val1
        buff.write(_struct_2dfhH.pack(_x.latitude, _x.longitude, _x.altitude, _x.heading, _x.staytime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.waypoint_list is None:
        self.waypoint_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoint_list = []
      for i in range(0, length):
        val1 = dji_sdk.msg.Waypoint()
        _x = val1
        start = end
        end += 24
        (_x.latitude, _x.longitude, _x.altitude, _x.heading, _x.staytime,) = _struct_2dfhH.unpack(str[start:end])
        self.waypoint_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.waypoint_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoint_list:
        _x = val1
        buff.write(_struct_2dfhH.pack(_x.latitude, _x.longitude, _x.altitude, _x.heading, _x.staytime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.waypoint_list is None:
        self.waypoint_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoint_list = []
      for i in range(0, length):
        val1 = dji_sdk.msg.Waypoint()
        _x = val1
        start = end
        end += 24
        (_x.latitude, _x.longitude, _x.altitude, _x.heading, _x.staytime,) = _struct_2dfhH.unpack(str[start:end])
        self.waypoint_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2dfhH = struct.Struct("<2dfhH")
