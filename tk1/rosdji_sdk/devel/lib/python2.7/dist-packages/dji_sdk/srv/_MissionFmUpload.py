# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_sdk/MissionFmUploadRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dji_sdk.msg

class MissionFmUploadRequest(genpy.Message):
  _md5sum = "9cd25f0a53a1d10e6538dd9fb391a7e8"
  _type = "dji_sdk/MissionFmUploadRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """MissionFollowmeTask followme_task

================================================================================
MSG: dji_sdk/MissionFollowmeTask
uint8 mode
uint8 yaw_mode
float64 initial_latitude
float64 initial_longitude
uint16 initial_altitude
uint8 sensitivity
"""
  __slots__ = ['followme_task']
  _slot_types = ['dji_sdk/MissionFollowmeTask']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       followme_task

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MissionFmUploadRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.followme_task is None:
        self.followme_task = dji_sdk.msg.MissionFollowmeTask()
    else:
      self.followme_task = dji_sdk.msg.MissionFollowmeTask()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2B2dHB.pack(_x.followme_task.mode, _x.followme_task.yaw_mode, _x.followme_task.initial_latitude, _x.followme_task.initial_longitude, _x.followme_task.initial_altitude, _x.followme_task.sensitivity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.followme_task is None:
        self.followme_task = dji_sdk.msg.MissionFollowmeTask()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.followme_task.mode, _x.followme_task.yaw_mode, _x.followme_task.initial_latitude, _x.followme_task.initial_longitude, _x.followme_task.initial_altitude, _x.followme_task.sensitivity,) = _struct_2B2dHB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2B2dHB.pack(_x.followme_task.mode, _x.followme_task.yaw_mode, _x.followme_task.initial_latitude, _x.followme_task.initial_longitude, _x.followme_task.initial_altitude, _x.followme_task.sensitivity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.followme_task is None:
        self.followme_task = dji_sdk.msg.MissionFollowmeTask()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.followme_task.mode, _x.followme_task.yaw_mode, _x.followme_task.initial_latitude, _x.followme_task.initial_longitude, _x.followme_task.initial_altitude, _x.followme_task.sensitivity,) = _struct_2B2dHB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2B2dHB = struct.Struct("<2B2dHB")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_sdk/MissionFmUploadResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MissionFmUploadResponse(genpy.Message):
  _md5sum = "eb13ac1f1354ccecb7941ee8fa2192e8"
  _type = "dji_sdk/MissionFmUploadResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool result

"""
  __slots__ = ['result']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MissionFmUploadResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
    else:
      self.result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_B.unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_B.unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class MissionFmUpload(object):
  _type          = 'dji_sdk/MissionFmUpload'
  _md5sum = '10ed872d3d019b452e558098ab5f5224'
  _request_class  = MissionFmUploadRequest
  _response_class = MissionFmUploadResponse
