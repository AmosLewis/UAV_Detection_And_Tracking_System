/** @file client.cpp
 *  @version 3.1.8
 *  @date July 29th, 2016
 *
 *  @brief
 *  All the exampls for ROS are implemented here. 
 *
 *  @copyright 2016 DJI. All rights reserved.
 *
 */



#include <ros/ros.h>
#include <stdio.h>
#include <dji_sdk/dji_drone.h>
#include <cstdlib>
#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/terminal_state.h>
#include<geometry_msgs/Twist.h>
#include<dji_sdk_lib/DJI_Flight.h>
#include<math.h>
#include<kcf/Sendselect.h>

using namespace DJI::onboardSDK;


int controlflag=1;//control flag

float xstart,ystart;
float heightstandard=4;
float dis_gap=1;//wu cha zhi
float dis_safe=3;//moren anquan juli
float dis_safex=3;//moren anquan juli
float dis_safey=3;//moren anquan juli



int loopcount=100;

//camera constant
double u0=627.0;
double v0=333.0;
double ay=769.0;
double ax=776.0;
double PI = 3.1415926535898;

int flag=0;



class Uavcontrol
{
	ros::NodeHandle nh;
	DJIDrone* drone=new DJIDrone(nh);
	ros::Subscriber sub;

	float flag_first=1;//first run callbackfunc flag


public:

	Uavcontrol()
	{

		/***takeoff **/
		if(drone->request_sdk_permission_control())
		{
			ROS_INFO_STREAM("control sucess");
			drone->takeoff();
			sleep(8);

			xstart=drone->local_position.x;
			ystart=drone->local_position.y;

			drone->gimbal_angle_control(0,-300,0,20);

			ROS_INFO_STREAM("xstart:"<<xstart<<" ystart: "<<ystart);

			ROS_INFO_STREAM("first start control");	
			controlflag=1;
		}
		else
		{
			ROS_INFO_STREAM("control error ,end ");
			controlflag=0;
		}



		/**flight to heightstandard**/
		ROS_INFO_STREAM("fight to heightstandard");
		loopcount=800;
		for(int i=0;i<loopcount;i++)
		{
		//	ROS_INFO_STREAM("xstart:"<<start<<" ystart: "<<ystart);
			ROS_INFO_STREAM("xstart:"<<i<<" ystart: "<<i);
			drone->attitude_control(0x5B,0,0,heightstandard,0);
			ROS_INFO_STREAM("local_position: "<<drone->local_position.x<<" ,"<<drone->local_position.y<<" ,"<<drone->local_position.z);
			usleep(20000);
		}



		sub=nh.subscribe("sendselect/cmd_vel",100,&Uavcontrol::realcontrol,this);

	}

	~Uavcontrol(){}


	void realcontrol(const kcf::Sendselect& msg)
	{
			/**camera control **/	
			ROS_INFO_STREAM("control camera");	
			drone->gimbal_angle_control(0,-300,0,20);

			int Height=drone->local_position.z;
			int angle=30;
			float xvel=0;
			float yvel=0;
			
			ROS_INFO_STREAM("local_position: x: "<<drone->local_position.x<<" ,y: "<<drone->local_position.y<<" ,z:"<<drone->local_position.z);

			double u=msg.x+msg.width/2;
			double v=msg.y+msg.height;
			double arc_angle=atan((v0-v)/ay)*180/PI; 
			double dis_y=Height*tan(((90-angle+arc_angle)/180)*PI);
			double angle_ocp=((90-angle+arc_angle)/180)*PI;
			double angle_ccp=atan((v0-v)/ay)*180/PI;
			double dis_x=Height*(u-u0)*cos(atan((v0-v)/ay))/(cos(angle_ocp)*ax);
			double dis_result=sqrt(dis_y*dis_y+dis_x*dis_x);
			double angle_uav=atan(dis_x/dis_y)*180/PI;

			dis_x*=100;
			dis_y*=100;
			dis_result*=100;

			ROS_INFO_STREAM("dis_y"<<dis_y<<" result :"<<dis_result);



			if(flag_first==1)
			{
				dis_safe=dis_result;
			//	dis_safex=dis_x;
			//	dis_safey=dis_y;
//				ROS_INFO_STREAM("dis_safe: "<<dis_safe);
			}



	//		int loopcount=(dis_x+50)>(dis_y+50)?(int)(dis_x+50):(int)(dis_y+50);

		//	for(int i=0;i<loopcount;i++)
		//	{
	//			xvel=i<dis_x?0.5:0;
	//			yvel=i<dis_y?0.5:0;
		//		xvel=i<dis_result?0.5:0;
/*			if(dis_result>=dis_safe-dis_gap*100 && dis_result<=dis_safe+dis_gap*100)
			{
				xvel=0;
				yvel=0;

				drone->attitude_control(0x5B,xvel,yvel,heightstandard,0);
		//		usleep(20000);
			}
			else if(dis_result>dis_safe+dis_gap*100)
			{
				xvel=-0.5;
				yvel=0;

				drone->attitude_control(0x5B,xvel,yvel,heightstandard,0);
		//		usleep(20000);
			}
			else 
			{
				xvel=0.5;
				yvel=0;

				drone->attitude_control(0x5B,xvel,yvel,heightstandard,0);
		//		usleep(20000);
			}
*/

				xvel=0.5;
				yvel=0;

				drone->attitude_control(0x5B,xvel,yvel,heightstandard,0);

	}
	

};


int main(int argc,char** argv)
{
	ros::init(argc,argv,"uavcontrol");
//	ros::NodeHandle nh;
//  ros::Subscriber sub=nh.subscribe("tracker/cmd_vel",1000,&poseMessageReceived);

	Uavcontrol uavcontrol;

/*	while(ros::ok())
	{

		ros::spinOnce();
		
	}
	*/
	ros::spin();
	return 0;
	
}
